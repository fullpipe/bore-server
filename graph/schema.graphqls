type Book {
  id: ID!
  title: String!
  author: String!
  reader: String!
  parts: [Part!]!
  download: Download!
  error: String
  state: BookState!
}

type Part {
  id: ID!
  title: String!
  possition: Uint!
  source: String!
  path: String!
}

type Download {
  id: ID!
  name: String!
  magnet: String!
  state: DownloadState!
  length: Int64!
  downloaded: Int64!
  error: String
}

type JWT {
  access: String!
  refresh: String!
  roles: [Role!]!
}

directive @hasRole(role: Role!) on FIELD_DEFINITION
enum Role {
  ADMIN
  USER
}

type Query {
  books(filter: BooksFilter): [Book!]!
  book(id: ID!): Book
}

input BooksFilter {
  search: String
}

type Mutation {
  createBook(input: NewBookInput!): Book! @hasRole(role: ADMIN)
  refreshToken(refreshToken: String!): JWT!
  loginRequest(input: LoginRequestInput!): ID!
  login(input: LoginInput!): JWT!
}

input LoginRequestInput {
  email: String!
}

input LoginInput {
  requestID: ID!
  code: String!
}

input NewBookInput {
  magnet: String!
}

scalar Uint
scalar Int64
scalar DownloadState
scalar BookState
