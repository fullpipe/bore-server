// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type BooksFilter struct {
	Search *string `json:"search,omitempty"`
}

type Jwt struct {
	Access  string `json:"access"`
	Refresh string `json:"refresh"`
	Roles   []Role `json:"roles"`
}

type LoginInput struct {
	RequestID uint   `json:"requestID"`
	Code      string `json:"code"`
}

type LoginRequestInput struct {
	Email string `json:"email"`
}

type NewBookInput struct {
	Magnet string `json:"magnet"`
}

type ProgressInput struct {
	BookID         uint    `json:"bookID"`
	Part           uint    `json:"part"`
	Speed          float64 `json:"speed"`
	Position       float64 `json:"position"`
	GlobalDuration float64 `json:"globalDuration"`
	GlobalPosition float64 `json:"globalPosition"`
}

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
